// <auto-generated />
using System;
using College.Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace College.Infrastructure.Migrations
{
    [DbContext(typeof(CollegeAppContext))]
    [Migration("20190923160034_AddDataModel2")]
    partial class AddDataModel2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("College.Model.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<string>("Name");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("College.Model.Models.CollegeInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CollegeInstitutions");
                });

            modelBuilder.Entity("College.Model.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("College.Model.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DivisionId");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("College.Model.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollegeInstitutionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CollegeInstitutionId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("College.Model.Models.Executor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Executors");
                });

            modelBuilder.Entity("College.Model.Models.Grade", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ExamTime");

                    b.Property<int>("Id");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int>("Mark");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("College.Model.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DivisionId");

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("College.Model.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("College.Model.Models.City", b =>
                {
                    b.HasOne("College.Model.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("College.Model.Models.CollegeInstitution", b =>
                {
                    b.HasOne("College.Model.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("College.Model.Models.Course", b =>
                {
                    b.HasOne("College.Model.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("College.Model.Models.Division", b =>
                {
                    b.HasOne("College.Model.Models.CollegeInstitution", "CollegeInstitution")
                        .WithMany()
                        .HasForeignKey("CollegeInstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("College.Model.Models.Executor", b =>
                {
                    b.HasOne("College.Model.Models.Course", "Course")
                        .WithMany("Executors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("College.Model.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("College.Model.Models.Grade", b =>
                {
                    b.HasOne("College.Model.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("College.Model.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("College.Model.Models.Student", b =>
                {
                    b.HasOne("College.Model.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("College.Model.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("College.Model.Models.Teacher", b =>
                {
                    b.HasOne("College.Model.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
